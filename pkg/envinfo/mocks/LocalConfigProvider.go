// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	envinfo "github.com/openshift/odo/pkg/envinfo"
	mock "github.com/stretchr/testify/mock"
)

// LocalConfigProvider is an autogenerated mock type for the LocalConfigProvider type
type LocalConfigProvider struct {
	mock.Mock
}

// Exists provides a mock function with given fields:
func (_m *LocalConfigProvider) Exists() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetApplication provides a mock function with given fields:
func (_m *LocalConfigProvider) GetApplication() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDebugPort provides a mock function with given fields:
func (_m *LocalConfigProvider) GetDebugPort() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *LocalConfigProvider) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNamespace provides a mock function with given fields:
func (_m *LocalConfigProvider) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetURL provides a mock function with given fields:
func (_m *LocalConfigProvider) GetURL() []envinfo.EnvInfoURL {
	ret := _m.Called()

	var r0 []envinfo.EnvInfoURL
	if rf, ok := ret.Get(0).(func() []envinfo.EnvInfoURL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]envinfo.EnvInfoURL)
		}
	}

	return r0
}
