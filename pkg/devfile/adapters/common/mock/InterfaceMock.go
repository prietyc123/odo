// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/odo/pkg/devfile/adapters/common (interfaces: ComponentAdapter,StorageAdapter)

// Package mock_common is a generated GoMock package.
package mock_common

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/openshift/odo/pkg/devfile/adapters/common"
	common0 "github.com/openshift/odo/pkg/devfile/parser/data/common"
	machineoutput "github.com/openshift/odo/pkg/machineoutput"
	io "io"
	reflect "reflect"
)

// MockComponentAdapter is a mock of ComponentAdapter interface
type MockComponentAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockComponentAdapterMockRecorder
}

// MockComponentAdapterMockRecorder is the mock recorder for MockComponentAdapter
type MockComponentAdapterMockRecorder struct {
	mock *MockComponentAdapter
}

// NewMockComponentAdapter creates a new mock instance
func NewMockComponentAdapter(ctrl *gomock.Controller) *MockComponentAdapter {
	mock := &MockComponentAdapter{ctrl: ctrl}
	mock.recorder = &MockComponentAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentAdapter) EXPECT() *MockComponentAdapterMockRecorder {
	return m.recorder
}

// ComponentInfo mocks base method
func (m *MockComponentAdapter) ComponentInfo(arg0 common0.DevfileCommand) (common.ComponentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentInfo", arg0)
	ret0, _ := ret[0].(common.ComponentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentInfo indicates an expected call of ComponentInfo
func (mr *MockComponentAdapterMockRecorder) ComponentInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentInfo", reflect.TypeOf((*MockComponentAdapter)(nil).ComponentInfo), arg0)
}

// Delete mocks base method
func (m *MockComponentAdapter) Delete(arg0 map[string]string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockComponentAdapterMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockComponentAdapter)(nil).Delete), arg0, arg1)
}

// DoesComponentExist mocks base method
func (m *MockComponentAdapter) DoesComponentExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesComponentExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesComponentExist indicates an expected call of DoesComponentExist
func (mr *MockComponentAdapterMockRecorder) DoesComponentExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesComponentExist", reflect.TypeOf((*MockComponentAdapter)(nil).DoesComponentExist), arg0)
}

// Exec mocks base method
func (m *MockComponentAdapter) Exec(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockComponentAdapterMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockComponentAdapter)(nil).Exec), arg0)
}

// ExecCMDInContainer mocks base method
func (m *MockComponentAdapter) ExecCMDInContainer(arg0 common.ComponentInfo, arg1 []string, arg2, arg3 io.Writer, arg4 io.Reader, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCMDInContainer", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCMDInContainer indicates an expected call of ExecCMDInContainer
func (mr *MockComponentAdapterMockRecorder) ExecCMDInContainer(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCMDInContainer", reflect.TypeOf((*MockComponentAdapter)(nil).ExecCMDInContainer), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Log mocks base method
func (m *MockComponentAdapter) Log(arg0, arg1 bool) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log
func (mr *MockComponentAdapterMockRecorder) Log(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockComponentAdapter)(nil).Log), arg0, arg1)
}

// Logger mocks base method
func (m *MockComponentAdapter) Logger() machineoutput.MachineEventLoggingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(machineoutput.MachineEventLoggingClient)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockComponentAdapterMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockComponentAdapter)(nil).Logger))
}

// Push mocks base method
func (m *MockComponentAdapter) Push(arg0 common.PushParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockComponentAdapterMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockComponentAdapter)(nil).Push), arg0)
}

// SupervisorComponentInfo mocks base method
func (m *MockComponentAdapter) SupervisorComponentInfo(arg0 common0.DevfileCommand) (common.ComponentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupervisorComponentInfo", arg0)
	ret0, _ := ret[0].(common.ComponentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupervisorComponentInfo indicates an expected call of SupervisorComponentInfo
func (mr *MockComponentAdapterMockRecorder) SupervisorComponentInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupervisorComponentInfo", reflect.TypeOf((*MockComponentAdapter)(nil).SupervisorComponentInfo), arg0)
}

// Test mocks base method
func (m *MockComponentAdapter) Test(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test
func (mr *MockComponentAdapterMockRecorder) Test(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockComponentAdapter)(nil).Test), arg0, arg1)
}

// MockStorageAdapter is a mock of StorageAdapter interface
type MockStorageAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAdapterMockRecorder
}

// MockStorageAdapterMockRecorder is the mock recorder for MockStorageAdapter
type MockStorageAdapterMockRecorder struct {
	mock *MockStorageAdapter
}

// NewMockStorageAdapter creates a new mock instance
func NewMockStorageAdapter(ctrl *gomock.Controller) *MockStorageAdapter {
	mock := &MockStorageAdapter{ctrl: ctrl}
	mock.recorder = &MockStorageAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageAdapter) EXPECT() *MockStorageAdapterMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStorageAdapter) Create(arg0 []common.Storage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStorageAdapterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageAdapter)(nil).Create), arg0)
}
