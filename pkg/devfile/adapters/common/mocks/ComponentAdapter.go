// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	adapterscommon "github.com/openshift/odo/pkg/devfile/adapters/common"
	common "github.com/openshift/odo/pkg/devfile/parser/data/common"

	io "io"

	machineoutput "github.com/openshift/odo/pkg/machineoutput"

	mock "github.com/stretchr/testify/mock"
)

// ComponentAdapter is an autogenerated mock type for the ComponentAdapter type
type ComponentAdapter struct {
	mock.Mock
}

// ComponentInfo provides a mock function with given fields: command
func (_m *ComponentAdapter) ComponentInfo(command common.DevfileCommand) (adapterscommon.ComponentInfo, error) {
	ret := _m.Called(command)

	var r0 adapterscommon.ComponentInfo
	if rf, ok := ret.Get(0).(func(common.DevfileCommand) adapterscommon.ComponentInfo); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(adapterscommon.ComponentInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.DevfileCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: labels, show
func (_m *ComponentAdapter) Delete(labels map[string]string, show bool) error {
	ret := _m.Called(labels, show)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string, bool) error); ok {
		r0 = rf(labels, show)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesComponentExist provides a mock function with given fields: cmpName
func (_m *ComponentAdapter) DoesComponentExist(cmpName string) (bool, error) {
	ret := _m.Called(cmpName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(cmpName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cmpName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exec provides a mock function with given fields: command
func (_m *ComponentAdapter) Exec(command []string) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecCMDInContainer provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *ComponentAdapter) ExecCMDInContainer(_a0 adapterscommon.ComponentInfo, _a1 []string, _a2 io.Writer, _a3 io.Writer, _a4 io.Reader, _a5 bool) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapterscommon.ComponentInfo, []string, io.Writer, io.Writer, io.Reader, bool) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log provides a mock function with given fields: follow, debug
func (_m *ComponentAdapter) Log(follow bool, debug bool) (io.ReadCloser, error) {
	ret := _m.Called(follow, debug)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(bool, bool) io.ReadCloser); ok {
		r0 = rf(follow, debug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, bool) error); ok {
		r1 = rf(follow, debug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger provides a mock function with given fields:
func (_m *ComponentAdapter) Logger() machineoutput.MachineEventLoggingClient {
	ret := _m.Called()

	var r0 machineoutput.MachineEventLoggingClient
	if rf, ok := ret.Get(0).(func() machineoutput.MachineEventLoggingClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(machineoutput.MachineEventLoggingClient)
		}
	}

	return r0
}

// Push provides a mock function with given fields: parameters
func (_m *ComponentAdapter) Push(parameters adapterscommon.PushParameters) error {
	ret := _m.Called(parameters)

	var r0 error
	if rf, ok := ret.Get(0).(func(adapterscommon.PushParameters) error); ok {
		r0 = rf(parameters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SupervisorComponentInfo provides a mock function with given fields: command
func (_m *ComponentAdapter) SupervisorComponentInfo(command common.DevfileCommand) (adapterscommon.ComponentInfo, error) {
	ret := _m.Called(command)

	var r0 adapterscommon.ComponentInfo
	if rf, ok := ret.Get(0).(func(common.DevfileCommand) adapterscommon.ComponentInfo); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(adapterscommon.ComponentInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.DevfileCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Test provides a mock function with given fields: testCmd, show
func (_m *ComponentAdapter) Test(testCmd string, show bool) error {
	ret := _m.Called(testCmd, show)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(testCmd, show)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
